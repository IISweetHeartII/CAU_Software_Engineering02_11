@startuml model-class-diagram.puml

skinparam classAttributeIconSize 0
skinparam classBackgroundColor #D0E6F5

' 1열
class Position
class BoardManager
class Piece

' 2열
class GameManager
class Config

' 3열
class YutManager
class YutResult
enum YutResultType

' --- 숨겨진 정렬 고정 ---
Position -[hidden]- BoardManager
BoardManager -[hidden]- Piece

' --- 관계선 ---
GameManager "1" -left- "1" BoardManager : uses
GameManager "1" -left- "*" Position : uses
GameManager "1" -right- "1" YutManager : uses

GameManager "1" --> "*" Piece : manages

BoardManager "1" o-- "*" Position : aggregates

BoardManager "1" -down- "*" Piece : uses
YutManager "1" -down- "1" YutResult : creates
YutResult "1" -down- "1" YutResultType : has a

GameManager -down- Config

class GameManager {
  - boardManager: BoardManager
  - yutManager: YutManager
  - numberOfPlayers: int
  - numberOfPieces: int
  - boardFigure: int
  - countOfPieceAtStart: int[]
  - countOfPieceAtEnd: int[]
  - currentPlayerIndex: int
  - extraTurnCount: int
  - yutHistory: ArrayDeque<Integer>
  - positionPieceMap: Map<String, Piece>
  --
  + GameManager()
  + getNumberOfPlayers(): int
  + getNumberOfPieces(): int
  + getCurrentPlayer(): int
  + getCountOfPieceAtStart(): int[]
  + getCountOfPieceAtEnd(): int[]
  + getPositionPieceMap(): Map<String, String>
  + getSize(): int
  + isExtraMove(): boolean
  + isExtraTurn(): boolean
  + isCurrentPlayersPiecePresent(positionId: String): boolean
  + isValidMove(startPosition: String, targetPosition: String): boolean
  + movePiece(piecePositionId: String, destinationPositionId: String): Map<String, String>
  + processYutResult(yutResult: YutResult): Map<String, Object>
  + getCurrentPlayerNumber(): int
  + nextTurn(): int
  + checkGameEnd(): boolean
  + getWinningPlayerId(): int
  + getMoveCount(startPosition: String, targetPosition: String): int
  + resetGame(): void
}

class BoardManager {
  # pathGraph: Map<Position, List<Position>>
  # center: Position
  # boardFigure: int
  # beforeEND: String
  --
  + BoardManager()
  + getBoardFigure(): int
  + getBeforeEND(): String
  + setPreviousPosition(currentPosition: Position, moveCount: int, piece: Piece): Position
  - init4Graph(): void
  - init5Graph(): void
  - init6Graph(): void
}

class Piece {
  - id: String
  - size: int
  - previousPosition: Position
  --
  + Piece(id: String, previousPosition: String)
  + getId(): String
  + getSize(): int
  + getPlayerId(): String
  + getPreviousPosition(): Position
  + hashCode(): int
  + setPreviousPosition(previousPosition: String): void
  + equals(obj: Object): boolean
  + group(other: Piece): void
  + isSamePlayers(other: Piece): boolean
}

class Position {
  - id: String
  --
  + Position(id: String)
  + getId(): String
  + equals(obj: Object): boolean
  + equals(id: String): boolean
  + hashCode(): int
  + toString(): String
}

class YutManager {
  - random: Random
  --
  + throwYutRandom(): YutResult
  + throwYutCustom(n: int): YutResult
}

class YutResult {
  - resultType: YutResultType
  --
  + YutResult(resultType: YutResultType)
  + getYutResultType(): YutResultType
  + getValue(): int
  + isExtraTurn(): boolean
  + equals(obj: Object): boolean
  + toString(): String
}

enum YutResultType {
  BACK_DO(-1, false)
  DO(1, false)
  GAE(2, false)
  GEOL(3, false)
  YUT(4, true)
  MO(5, true)
  --
  - steps: int
  - extraTurn: boolean
  --
  + getSteps(): int
  + hasExtraTurn(): boolean
}

class Config {
  - boardSize: int
  - playerCount: int
  - pieceCount: int
  - uiType: int
  --
  - loadConfig(): void
  - setDefaultValues(): void
  + {static} getBoardSize(): int
  + {static} getPlayerCount(): int
  + {static} getPieceCount(): int
  + {static} getUiType(): int
}

@enduml 